{"version":3,"file":"index.mjs","sources":["../types/index.js"],"sourcesContent":["function t() {\n  return {}.toString.call({\n    [Symbol.toStringTag]: \"EventEmitterTarget\"\n  });\n}\n\nfunction e(t) {\n  if (\"string\" != typeof t && \"symbol\" != typeof t) throw new TypeError(\" EVENTNAME expected: string | symbol;but invalid :\" + t);\n}\n\nfunction n(t) {\n  if (\"function\" != typeof t) throw new TypeError(\" EVENTLISTENER expected: (event?: any) => void;but invalid:\" + t);\n}\n\nfunction o() {\n  const o = new Map(),\n        r = new WeakMap();\n\n  function i(t) {\n    let e = o.get(t);\n    return e || (e = new Set(), o.set(t, e)), e;\n  }\n\n  function c(t) {\n    e(t), o.has(t) && i(t).clear();\n  }\n\n  function s(t, n) {\n    e(t), o.has(t) && i(t).forEach(t => {\n      Promise.resolve().then(() => {\n        t(n);\n      });\n    });\n  }\n\n  function u(t, o) {\n    e(t), n(o), i(t).add(o);\n  }\n\n  function f(t, e) {\n    i(t).delete(e);\n  }\n\n  function a(t, o) {\n    e(t), n(o), f(t, o), function (t, e) {\n      const n = i(t);\n      let o = r.get(e);\n      o && n.delete(o);\n    }(t, o);\n  }\n\n  function l() {\n    return [...o].map(([t, e]) => [t, [...e]])[Symbol.iterator]();\n  }\n\n  return {\n    [Symbol.toPrimitive]: t,\n    [Symbol.toStringTag]: \"EventEmitterTarget\",\n    [Symbol.iterator]: l,\n    entries: l,\n    listenerCount: function (t) {\n      return e(t), o.has(t) ? i(t).size : 0;\n    },\n    clear: c,\n    removeAllListeners: c,\n    on: u,\n    addListener: u,\n    off: a,\n    removeListener: a,\n    once: function (t, o) {\n      e(t), n(o);\n      let i = !1,\n          c = r.get(o);\n\n      if (!c) {\n        const e = n => {\n          f(t, e), f(t, o), i || (i = !0, o(n));\n        };\n\n        c = e, r.set(o, c);\n      }\n\n      f(t, o), u(t, c);\n    },\n    emit: s,\n    dispatch: s,\n    eventNames: function () {\n      return [...o.keys()];\n    },\n    listeners: function (t) {\n      return e(t), o.has(t) ? [...i(t)] : [];\n    }\n  };\n}\n\nconst r = (t => {\n  var e = Symbol(),\n      n = new Function(\"return async()=>{}\")()();\n\n  function r() {\n    const t = o();\n    return this && this instanceof r ? (Object.assign(this, t), this) : Reflect.construct(r, []);\n  }\n\n  return Reflect.set(r, e, n), r;\n})();\n\nfunction gethashparams() {\r\n    return ((location.hash &&\r\n        Object.fromEntries(new URLSearchParams(location.hash.slice(1)))) ||\r\n        {});\r\n}\n\nfunction gethashhref(to) {\r\n    if (!to) {\r\n        throw new TypeError(to);\r\n    }\r\n    let params = gethashparams();\r\n    let url = new URL(location.href);\r\n    if (\"function\" === typeof to) {\r\n        params = to(params);\r\n        url.hash = String(new URLSearchParams({ ...to }));\r\n        return url.href;\r\n    }\r\n    if (\"object\" === typeof to) {\r\n        params = to;\r\n        url.hash = String(new URLSearchParams({ ...to }));\r\n        return url.href;\r\n    }\r\n    throw new TypeError(to);\r\n}\n\nfunction sethashparams(opt) {\r\n    const oldhash = location.hash;\r\n    let url = new URL(location.href);\r\n    url.hash = String(new URLSearchParams({ ...opt }));\r\n    if (oldhash === url.hash) {\r\n        return;\r\n    }\r\n    history.pushState({}, \"\", url.href);\r\n    window.dispatchEvent(new Event(\"hashchange\"));\r\n}\n\nfunction transformhashparams(opt) {\r\n    sethashparams(opt(gethashparams()));\r\n}\n\nfunction matchroute(routes, params) {\r\n    for (let route of routes) {\r\n        if (route.params(params)) {\r\n            return route;\r\n        }\r\n    }\r\n    return undefined;\r\n}\n\nfunction getsearchparams() {\r\n    return ((location.search &&\r\n        Object.fromEntries(new URL(location.href).searchParams)) ||\r\n        {});\r\n}\n\nfunction getsearchhref(to) {\r\n    if (!to) {\r\n        throw new TypeError(to);\r\n    }\r\n    let params = getsearchparams();\r\n    let url = new URL(location.href);\r\n    if (\"function\" === typeof to) {\r\n        params = to(params);\r\n        url.search = String(new URLSearchParams({ ...to }));\r\n        return url.href;\r\n    }\r\n    if (\"object\" === typeof to) {\r\n        params = to;\r\n        url.search = String(new URLSearchParams({ ...to }));\r\n        return url.href;\r\n    }\r\n    throw new TypeError(to);\r\n}\n\nfunction setsearchparams(opt) {\r\n    const oldsearch = location.search;\r\n    let url = new URL(location.href);\r\n    url.search = String(new URLSearchParams({ ...opt }));\r\n    if (oldsearch === url.search) {\r\n        return;\r\n    }\r\n    history.pushState({}, \"\", url.href);\r\n    window.dispatchEvent(new Event(\"popstate\"));\r\n}\n\nfunction transformsearchparams(opt) {\r\n    setsearchparams(opt(getsearchparams()));\r\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\n\nfunction isObject$2(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nvar isObject_1 = isObject$2;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\nvar _freeGlobal = freeGlobal$1;\n\nvar freeGlobal = _freeGlobal;\n/** Detect free variable `self`. */\n\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n/** Used as a reference to the global object. */\n\nvar root$2 = freeGlobal || freeSelf || Function('return this')();\nvar _root = root$2;\n\nvar root$1 = _root;\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\n\nvar now$1 = function () {\n  return root$1.Date.now();\n};\n\nvar now_1 = now$1;\n\n/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\n\nfunction trimmedEndIndex$1(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n\n  return index;\n}\n\nvar _trimmedEndIndex = trimmedEndIndex$1;\n\nvar trimmedEndIndex = _trimmedEndIndex;\n/** Used to match leading whitespace. */\n\nvar reTrimStart = /^\\s+/;\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\n\nfunction baseTrim$1(string) {\n  return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;\n}\n\nvar _baseTrim = baseTrim$1;\n\nvar root = _root;\n/** Built-in value references. */\n\nvar Symbol$3 = root.Symbol;\nvar _Symbol = Symbol$3;\n\nvar Symbol$2 = _Symbol;\n/** Used for built-in method references. */\n\nvar objectProto$1 = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto$1.hasOwnProperty;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar nativeObjectToString$1 = objectProto$1.toString;\n/** Built-in value references. */\n\nvar symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : undefined;\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\n\nfunction getRawTag$1(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag$1),\n      tag = value[symToStringTag$1];\n\n  try {\n    value[symToStringTag$1] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString$1.call(value);\n\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag$1] = tag;\n    } else {\n      delete value[symToStringTag$1];\n    }\n  }\n\n  return result;\n}\n\nvar _getRawTag = getRawTag$1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar nativeObjectToString = objectProto.toString;\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\n\nfunction objectToString$1(value) {\n  return nativeObjectToString.call(value);\n}\n\nvar _objectToString = objectToString$1;\n\nvar Symbol$1 = _Symbol,\n    getRawTag = _getRawTag,\n    objectToString = _objectToString;\n/** `Object#toString` result references. */\n\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n/** Built-in value references. */\n\nvar symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\n\nfunction baseGetTag$1(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n\n  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n}\n\nvar _baseGetTag = baseGetTag$1;\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\n\nfunction isObjectLike$1(value) {\n  return value != null && typeof value == 'object';\n}\n\nvar isObjectLike_1 = isObjectLike$1;\n\nvar baseGetTag = _baseGetTag,\n    isObjectLike = isObjectLike_1;\n/** `Object#toString` result references. */\n\nvar symbolTag = '[object Symbol]';\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\n\nfunction isSymbol$1(value) {\n  return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;\n}\n\nvar isSymbol_1 = isSymbol$1;\n\nvar baseTrim = _baseTrim,\n    isObject$1 = isObject_1,\n    isSymbol = isSymbol_1;\n/** Used as references for various `Number` constants. */\n\nvar NAN = 0 / 0;\n/** Used to detect bad signed hexadecimal string values. */\n\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n/** Used to detect binary string values. */\n\nvar reIsBinary = /^0b[01]+$/i;\n/** Used to detect octal string values. */\n\nvar reIsOctal = /^0o[0-7]+$/i;\n/** Built-in method references without a dependency on `root`. */\n\nvar freeParseInt = parseInt;\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\n\nfunction toNumber$1(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n\n  if (isSymbol(value)) {\n    return NAN;\n  }\n\n  if (isObject$1(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject$1(other) ? other + '' : other;\n  }\n\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n}\n\nvar toNumber_1 = toNumber$1;\n\nvar isObject = isObject_1,\n    now = now_1,\n    toNumber = toNumber_1;\n/** Error message constants. */\n\nvar FUNC_ERROR_TEXT = 'Expected a function';\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\n\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n\n  wait = toNumber(wait) || 0;\n\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time; // Start the timer for the trailing edge.\n\n    timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.\n\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n\n    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;\n  }\n\n  function timerExpired() {\n    var time = now();\n\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    } // Restart the timer.\n\n\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n\n    return result;\n  }\n\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nvar debounce_1 = debounce;\n\nfunction createBaseRouter(routes, type) {\r\n    const getroutes = \"function\" === typeof routes ? routes : () => routes;\r\n    const eventname = \"search\" === type ? \"popstate\" : \"hashchange\";\r\n    const emitter = r();\r\n    let lastroute = undefined;\r\n    let currentroute = undefined;\r\n    const changelistener = debounce_1(() => {\r\n        const params = \"hash\" === type ? gethashparams() : getsearchparams();\r\n        instance.emit(\"params\", params);\r\n    });\r\n    const onparamschange = debounce_1((params) => {\r\n        currentroute = matchroute(getroutes(), params);\r\n        if (!currentroute) {\r\n            return;\r\n        }\r\n        if (lastroute !== currentroute) {\r\n            instance.emit(\"route\", currentroute);\r\n        }\r\n        lastroute = currentroute;\r\n    });\r\n    function mount() {\r\n        window.addEventListener(eventname, changelistener);\r\n        instance.on(\"params\", onparamschange);\r\n        changelistener();\r\n    }\r\n    function unmount() {\r\n        window.removeEventListener(eventname, changelistener);\r\n        instance.off(\"params\", onparamschange);\r\n    }\r\n    function getcurrentroute() {\r\n        const params = instance.getparams();\r\n        onparamschange(params);\r\n        return currentroute;\r\n    }\r\n    const router = {\r\n        getcurrentroute,\r\n        mount,\r\n        unmount,\r\n        paramshref: \"hash\" === type ? gethashhref : getsearchhref,\r\n        setparams: \"hash\" === type ? sethashparams : setsearchparams,\r\n        getparams: \"hash\" === type ? gethashparams : getsearchparams,\r\n        transformparams: \"hash\" === type ? transformhashparams : transformsearchparams,\r\n        [Symbol.toStringTag]: \"search\" === type ? \"SearchRouter\" : \"HashRouter\",\r\n        getroutes: getroutes,\r\n    };\r\n    const instance = { ...emitter, ...router };\r\n    return instance;\r\n}\n\nfunction createHashRouter({ routes = [], } = {}) {\r\n    return createBaseRouter(routes, \"hash\");\r\n}\n\nfunction createSearchRouter({ routes = [], } = {}) {\r\n    return createBaseRouter(routes, \"search\");\r\n}\n\nfunction navigate(router, to) {\n  if (!to) {\n    throw new TypeError(to);\n  }\n\n  if (\"function\" === typeof to) {\n    router.transformparams(to);\n    return;\n  }\n\n  if (\"object\" === typeof to) {\n    router.setparams(to);\n    return;\n  }\n\n  throw new TypeError(to);\n}\n\nfunction createReactLink({\n  router,\n  forwardRef,\n  createElement\n}) {\n  console.log(router, forwardRef, createElement);\n  return forwardRef(({\n    component: Component = \"a\",\n    to,\n    onClick,\n    children,\n    target,\n    ...rest\n  }, forwardedRef) => {\n    const href = router.paramshref(to);\n\n    const newclick = event => {\n      try {\n        if (onClick) {\n          onClick(event);\n        }\n      } catch (ex) {\n        event.preventDefault();\n        throw ex;\n      }\n\n      if (!event.defaultPrevented && event.button === 0 && (!target || target === \"_self\") && !isModifiedEvent(event)) {\n        event.preventDefault();\n        navigate(router, to);\n      }\n    };\n\n    const props = { ...rest,\n      ref: forwardedRef,\n      href,\n      onClick: newclick,\n      target\n    };\n    return createElement(Component, props, children);\n  });\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport { createHashRouter, createReactLink, createSearchRouter };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"],"names":["toprimitive","toString","call","Symbol","toStringTag"],"mappings":"SAEgBA;WACL,GAAAC,SAAAC,KAAiB;SAAGC,OAAHC,cAAUA;;;;AAAAA,SAAAA,EAAAA;QAAAA,mBAAAA,KAAAA,mBAAAA,GAAAA,MAAAA,IAAAA,UAAAA,uDAAAA;;;AAAAA,SAAAA,EAAAA;QAAAA,qBAAAA,GAAAA,MAAAA,IAAAA,UAAAA,gEAAAA;;;AAAAA,SAAAA;UAAAA,IAAAA,IAAAA,KAAAA,IAAAA,IAAAA;aAAAA,EAAAA;YAAAA,IAAAA,EAAAA,IAAAA;eAAAA,MAAAA,IAAAA,IAAAA,KAAAA,EAAAA,IAAAA,GAAAA,KAAAA;;aAAAA,EAAAA;QAAAA,EAAAA,IAAAA,EAAAA,IAAAA,MAAAA,EAAAA,GAAAA;;aAAAA,EAAAA,GAAAA;QAAAA,EAAAA,IAAAA,EAAAA,IAAAA,MAAAA,EAAAA,GAAAA,SAAAA;YAAAA,QAAAA,UAAAA,MAAAA;gBAAAA,EAAAA;;;;aAAAA,EAAAA,GAAAA;QAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GAAAA,IAAAA;;aAAAA,EAAAA,GAAAA;QAAAA,EAAAA,GAAAA,OAAAA;;aAAAA,EAAAA,GAAAA;QAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GAAAA,IAAAA,SAAAA,GAAAA;kBAAAA,IAAAA,EAAAA;gBAAAA,IAAAA,EAAAA,IAAAA;YAAAA,KAAAA,EAAAA,OAAAA;SAAAA,CAAAA,GAAAA;;aAAAA;eAAAA,KAAAA,IAAAA,KAAAA,EAAAA,GAAAA,OAAAA,EAAAA,GAAAA,KAAAA,QAAAA,OAAAA;;WAAAA;SAAAA,OAAAA,cAAAA;SAAAA,OAAAA,cAAAA;SAAAA,OAAAA,WAAAA;QAAAA,SAAAA;QAAAA,eAAAA,SAAAA;mBAAAA,EAAAA,IAAAA,EAAAA,IAAAA,KAAAA,EAAAA,GAAAA,OAAAA;;QAAAA,OAAAA;QAAAA,oBAAAA;QAAAA,IAAAA;QAAAA,aAAAA;QAAAA,KAAAA;QAAAA,gBAAAA;QAAAA,MAAAA,SAAAA,GAAAA;YAAAA,EAAAA,IAAAA,EAAAA;gBAAAA,KAAAA,GAAAA,IAAAA,EAAAA,IAAAA;iBAAAA,GAAAA;sBAAAA,IAAAA;oBAAAA,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,IAAAA,MAAAA,KAAAA,GAAAA,EAAAA;;gBAAAA,IAAAA,GAAAA,EAAAA,IAAAA,GAAAA;;YAAAA,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA;;QAAAA,MAAAA;QAAAA,UAAAA;QAAAA,YAAAA;mBAAAA,KAAAA,EAAAA;;QAAAA,WAAAA,SAAAA;mBAAAA,EAAAA,IAAAA,EAAAA,IAAAA,KAAAA,KAAAA,EAAAA,OAAAA;;;;;AAAAA,MAAAA,IAAAA,CAAAA;QAAAA,IAAAA,UAAAA,IAAAA,IAAAA,SAAAA,qBAAAA,EAAAA;aAAAA;cAAAA,IAAAA;eAAAA,QAAAA,gBAAAA,KAAAA,OAAAA,OAAAA,MAAAA,IAAAA,QAAAA,QAAAA,UAAAA,GAAAA;;WAAAA,QAAAA,IAAAA,GAAAA,GAAAA,IAAAA;EAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}