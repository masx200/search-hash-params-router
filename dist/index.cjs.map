{"version":3,"file":"index.cjs","sources":["../types/index.js"],"sourcesContent":["function t() {\n  return {}.toString.call({\n    [Symbol.toStringTag]: \"EventEmitterTarget\"\n  });\n}\n\nfunction e(t) {\n  if (\"string\" != typeof t && \"symbol\" != typeof t) throw new TypeError(\" EVENTNAME expected: string | symbol;but invalid :\" + t);\n}\n\nfunction n(t) {\n  if (\"function\" != typeof t) throw new TypeError(\" EVENTLISTENER expected: (event?: any) => void;but invalid:\" + t);\n}\n\nfunction o() {\n  const o = new Map(),\n        r = new WeakMap();\n\n  function i(t) {\n    let e = o.get(t);\n    return e || (e = new Set(), o.set(t, e)), e;\n  }\n\n  function c(t) {\n    e(t), o.has(t) && i(t).clear();\n  }\n\n  function s(t, n) {\n    e(t), o.has(t) && i(t).forEach(t => {\n      Promise.resolve().then(() => {\n        t(n);\n      });\n    });\n  }\n\n  function u(t, o) {\n    e(t), n(o), i(t).add(o);\n  }\n\n  function f(t, e) {\n    i(t).delete(e);\n  }\n\n  function a(t, o) {\n    e(t), n(o), f(t, o), function (t, e) {\n      const n = i(t);\n      let o = r.get(e);\n      o && n.delete(o);\n    }(t, o);\n  }\n\n  function l() {\n    return [...o].map(([t, e]) => [t, [...e]])[Symbol.iterator]();\n  }\n\n  return {\n    [Symbol.toPrimitive]: t,\n    [Symbol.toStringTag]: \"EventEmitterTarget\",\n    [Symbol.iterator]: l,\n    entries: l,\n    listenerCount: function (t) {\n      return e(t), o.has(t) ? i(t).size : 0;\n    },\n    clear: c,\n    removeAllListeners: c,\n    on: u,\n    addListener: u,\n    off: a,\n    removeListener: a,\n    once: function (t, o) {\n      e(t), n(o);\n      let i = !1,\n          c = r.get(o);\n\n      if (!c) {\n        const e = n => {\n          f(t, e), f(t, o), i || (i = !0, o(n));\n        };\n\n        c = e, r.set(o, c);\n      }\n\n      f(t, o), u(t, c);\n    },\n    emit: s,\n    dispatch: s,\n    eventNames: function () {\n      return [...o.keys()];\n    },\n    listeners: function (t) {\n      return e(t), o.has(t) ? [...i(t)] : [];\n    }\n  };\n}\n\nconst r = (t => {\n  var e = Symbol(),\n      n = new Function(\"return async()=>{}\")()();\n\n  function r() {\n    const t = o();\n    return this && this instanceof r ? (Object.assign(this, t), this) : Reflect.construct(r, []);\n  }\n\n  return Reflect.set(r, e, n), r;\n})();\n\nfunction gethashparams() {\r\n    return ((location.hash &&\r\n        Object.fromEntries(new URLSearchParams(location.hash.slice(1)))) ||\r\n        {});\r\n}\n\nfunction gethashhref(to) {\r\n    if (!to) {\r\n        throw new TypeError(to);\r\n    }\r\n    let params = gethashparams();\r\n    let url = new URL(location.href);\r\n    if (\"function\" === typeof to) {\r\n        params = to(params);\r\n        url.hash = String(new URLSearchParams({ ...to }));\r\n        return url.href;\r\n    }\r\n    if (\"object\" === typeof to) {\r\n        params = to;\r\n        url.hash = String(new URLSearchParams({ ...to }));\r\n        return url.href;\r\n    }\r\n    throw new TypeError(to);\r\n}\n\nfunction sethashparams(opt) {\r\n    const oldhash = location.hash;\r\n    let url = new URL(location.href);\r\n    url.hash = String(new URLSearchParams({ ...opt }));\r\n    if (oldhash === url.hash) {\r\n        return;\r\n    }\r\n    history.pushState({}, \"\", url.href);\r\n    window.dispatchEvent(new Event(\"hashchange\"));\r\n}\n\nfunction transformhashparams(opt) {\r\n    sethashparams(opt(gethashparams()));\r\n}\n\nfunction matchroute(routes, params) {\r\n    for (let route of routes) {\r\n        if (route.params(params)) {\r\n            return route;\r\n        }\r\n    }\r\n    return undefined;\r\n}\n\nfunction getsearchparams() {\r\n    return ((location.search &&\r\n        Object.fromEntries(new URL(location.href).searchParams)) ||\r\n        {});\r\n}\n\nfunction getsearchhref(to) {\r\n    if (!to) {\r\n        throw new TypeError(to);\r\n    }\r\n    let params = getsearchparams();\r\n    let url = new URL(location.href);\r\n    if (\"function\" === typeof to) {\r\n        params = to(params);\r\n        url.search = String(new URLSearchParams({ ...to }));\r\n        return url.href;\r\n    }\r\n    if (\"object\" === typeof to) {\r\n        params = to;\r\n        url.search = String(new URLSearchParams({ ...to }));\r\n        return url.href;\r\n    }\r\n    throw new TypeError(to);\r\n}\n\nfunction setsearchparams(opt) {\r\n    const oldsearch = location.search;\r\n    let url = new URL(location.href);\r\n    url.search = String(new URLSearchParams({ ...opt }));\r\n    if (oldsearch === url.search) {\r\n        return;\r\n    }\r\n    history.pushState({}, \"\", url.href);\r\n    window.dispatchEvent(new Event(\"popstate\"));\r\n}\n\nfunction transformsearchparams(opt) {\r\n    setsearchparams(opt(getsearchparams()));\r\n}\n\nfunction createBaseRouter(routes, type) {\r\n    const eventname = \"search\" === type ? \"popstate\" : \"hashchange\";\r\n    const emitter = r();\r\n    let lastroute = undefined;\r\n    let currentroute = undefined;\r\n    const changelistener = () => {\r\n        const params = \"hash\" === type ? gethashparams() : getsearchparams();\r\n        instance.emit(\"params\", params);\r\n    };\r\n    const onparamschange = (params) => {\r\n        currentroute = matchroute(routes, params);\r\n        if (lastroute !== currentroute) {\r\n            instance.emit(\"route\");\r\n        }\r\n        lastroute = currentroute;\r\n    };\r\n    function mount() {\r\n        window.addEventListener(eventname, changelistener);\r\n        instance.on(\"params\", onparamschange);\r\n        changelistener();\r\n    }\r\n    function unmount() {\r\n        window.removeEventListener(eventname, changelistener);\r\n        instance.off(\"params\", onparamschange);\r\n    }\r\n    function getcurrentroute() {\r\n        const params = instance.getparams();\r\n        onparamschange(params);\r\n        return currentroute;\r\n    }\r\n    const router = {\r\n        getcurrentroute,\r\n        mount,\r\n        unmount,\r\n        paramshref: \"hash\" === type ? gethashhref : getsearchhref,\r\n        setparams: \"hash\" === type ? sethashparams : setsearchparams,\r\n        getparams: \"hash\" === type ? gethashparams : getsearchparams,\r\n        transformparams: \"hash\" === type ? transformhashparams : transformsearchparams,\r\n        [Symbol.toStringTag]: \"search\" === type ? \"SearchRouter\" : \"HashRouter\",\r\n        routes: routes,\r\n    };\r\n    const instance = { ...emitter, ...router };\r\n    return instance;\r\n}\n\nfunction createHashRouter({ routes = [], } = {}) {\r\n    return createBaseRouter(routes, \"hash\");\r\n}\n\nfunction createSearchRouter({ routes = [], } = {}) {\r\n    return createBaseRouter(routes, \"search\");\r\n}\n\nfunction navigate(router, to) {\n  if (!to) {\n    throw new TypeError(to);\n  }\n\n  if (\"function\" === typeof to) {\n    router.transformparams(to);\n    return;\n  }\n\n  if (\"object\" === typeof to) {\n    router.setparams(to);\n    return;\n  }\n\n  throw new TypeError(to);\n}\n\nfunction createReactLink({\n  router,\n  forwardRef,\n  createElement\n}) {\n  console.log(router, forwardRef, createElement);\n  return forwardRef(({\n    component: Component = \"a\",\n    to,\n    onClick,\n    children,\n    target,\n    ...rest\n  }, forwardedRef) => {\n    const href = router.paramshref(to);\n\n    const newclick = event => {\n      try {\n        if (onClick) {\n          onClick(event);\n        }\n      } catch (ex) {\n        event.preventDefault();\n        throw ex;\n      }\n\n      if (!event.defaultPrevented && event.button === 0 && (!target || target === \"_self\") && !isModifiedEvent(event)) {\n        event.preventDefault();\n        navigate(router, to);\n      }\n    };\n\n    const props = { ...rest,\n      ref: forwardedRef,\n      href,\n      onClick: newclick,\n      target\n    };\n    return createElement(Component, props, children);\n  });\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport { createHashRouter, createReactLink, createSearchRouter };\n//# sourceMappingURL=index.js.map\n"],"names":["toprimitive","toString","call","Symbol","toStringTag"],"mappings":"SAEgBA;WACL,GAAAC,SAAAC,KAAiB;SAAGC,OAAHC,cAAUA;;;;AAAAA,SAAAA,EAAAA;QAAAA,mBAAAA,KAAAA,mBAAAA,GAAAA,MAAAA,IAAAA,UAAAA,uDAAAA;;;AAAAA,SAAAA,EAAAA;QAAAA,qBAAAA,GAAAA,MAAAA,IAAAA,UAAAA,gEAAAA;;;AAAAA,SAAAA;UAAAA,IAAAA,IAAAA,KAAAA,IAAAA,IAAAA;aAAAA,EAAAA;YAAAA,IAAAA,EAAAA,IAAAA;eAAAA,MAAAA,IAAAA,IAAAA,KAAAA,EAAAA,IAAAA,GAAAA,KAAAA;;aAAAA,EAAAA;QAAAA,EAAAA,IAAAA,EAAAA,IAAAA,MAAAA,EAAAA,GAAAA;;aAAAA,EAAAA,GAAAA;QAAAA,EAAAA,IAAAA,EAAAA,IAAAA,MAAAA,EAAAA,GAAAA,SAAAA;YAAAA,QAAAA,UAAAA,MAAAA;gBAAAA,EAAAA;;;;aAAAA,EAAAA,GAAAA;QAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GAAAA,IAAAA;;aAAAA,EAAAA,GAAAA;QAAAA,EAAAA,GAAAA,OAAAA;;aAAAA,EAAAA,GAAAA;QAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GAAAA,IAAAA,SAAAA,GAAAA;kBAAAA,IAAAA,EAAAA;gBAAAA,IAAAA,EAAAA,IAAAA;YAAAA,KAAAA,EAAAA,OAAAA;SAAAA,CAAAA,GAAAA;;aAAAA;eAAAA,KAAAA,IAAAA,KAAAA,EAAAA,GAAAA,OAAAA,EAAAA,GAAAA,KAAAA,QAAAA,OAAAA;;WAAAA;SAAAA,OAAAA,cAAAA;SAAAA,OAAAA,cAAAA;SAAAA,OAAAA,WAAAA;QAAAA,SAAAA;QAAAA,eAAAA,SAAAA;mBAAAA,EAAAA,IAAAA,EAAAA,IAAAA,KAAAA,EAAAA,GAAAA,OAAAA;;QAAAA,OAAAA;QAAAA,oBAAAA;QAAAA,IAAAA;QAAAA,aAAAA;QAAAA,KAAAA;QAAAA,gBAAAA;QAAAA,MAAAA,SAAAA,GAAAA;YAAAA,EAAAA,IAAAA,EAAAA;gBAAAA,KAAAA,GAAAA,IAAAA,EAAAA,IAAAA;iBAAAA,GAAAA;sBAAAA,IAAAA;oBAAAA,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,IAAAA,MAAAA,KAAAA,GAAAA,EAAAA;;gBAAAA,IAAAA,GAAAA,EAAAA,IAAAA,GAAAA;;YAAAA,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA;;QAAAA,MAAAA;QAAAA,UAAAA;QAAAA,YAAAA;mBAAAA,KAAAA,EAAAA;;QAAAA,WAAAA,SAAAA;mBAAAA,EAAAA,IAAAA,EAAAA,IAAAA,KAAAA,KAAAA,EAAAA,OAAAA;;;;;;;;;AAAAA,MAAAA,IAAAA,CAAAA;QAAAA,IAAAA,UAAAA,IAAAA,IAAAA,SAAAA,qBAAAA,EAAAA;aAAAA;cAAAA,IAAAA;eAAAA,QAAAA,gBAAAA,KAAAA,OAAAA,OAAAA,MAAAA,IAAAA,QAAAA,QAAAA,UAAAA,GAAAA;;WAAAA,QAAAA,IAAAA,GAAAA,GAAAA,IAAAA;EAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}